getSalesSummaryByCategory:
SELECT
  c.name AS category_name,
  COUNT(*) AS num_of_sales,
  SUM(sp.sellingPrice * s.productNumber) AS total_sales
FROM category c
JOIN product p ON c.id = p.categoryNumber
JOIN storeProduct sp ON p.idProduct = sp.idProduct
JOIN sale s ON sp.upc = s.upc
GROUP BY c.name
ORDER BY total_sales DESC;

-- Цей запит обчислює загальний обсяг продажів та кількість проданих одиниць для кожної категорії товарів:
-- Об'єднуємо таблиці category, product, storeProduct, sale з відповідними зв'язками між ними.
-- Групує дані за назвою категорії.
-- Розраховує кількість продажів і загальний обсяг продажів для кожної категорії.
-- Сортує результати за спаданням загального обсягу продажів.

getProductsNotSoldAndNotPromotionalAndPriceGreatThan:
SELECT p.idProduct, p.productName, sp.sellingPrice
FROM product p
JOIN storeProduct sp ON p.idProduct = sp.idProduct
WHERE sp.sellingPrice >= ?
AND NOT EXISTS (
    SELECT 1
    FROM sale s
    WHERE s.upc = sp.upc
)
AND NOT EXISTS (
    SELECT 1
    FROM storeProduct sp2
    WHERE sp2.upc = sp.upc AND sp2.promotionalProduct = 1
);

-- Цей запит відображає всі продукти, які не мають продажів і не є промоційними продуктами
-- а також їх вартість більша або дорівнює заданому вхідному параметру
-- Об'єднуємо таблиці product та storeProduct з відповідними зв'язками між ними.
-- Застосовуємо умови з операторами NOT EXISTS для відбору продуктів, які відповідають критеріям.
-- Використовуємо вхідний параметр для фільтрації результатів за вартістю sellingPrice.